import os
import logging
import re
import telegram
import trafilatura
import google.generativeai as genai
import requests
from flask import Flask, request
import config


TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
BASE_URL = os.environ.get("BASE_URL")
WEBHOOK_URL = f"{BASE_URL}/{TELEGRAM_TOKEN}"


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

if not TELEGRAM_TOKEN:
    # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ –ª–æ–≥–∞—Ö Render –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.critical(
        "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å."
    )
    # –ú–æ–∂–Ω–æ –¥–∞–∂–µ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "—É–ø–∞–ª–æ" –∏ —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∏–ª–æ –æ –ø—Ä–æ–±–ª–µ–º–µ
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –û–î–ò–ù –†–ê–ó, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω—É–∂–Ω–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ.
bot = telegram.Bot(TELEGRAM_TOKEN)

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.5-pro")

# –ù–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –û–Ω ‚Äî —Å–µ—Ä–¥—Ü–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.
PROMPT = """
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ Telegram-–∫–∞–Ω–∞–ª.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏ –µ–º–∫—É—é –∑–∞–º–µ—Ç–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1.  –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
2.  –û–ø—Ä–µ–¥–µ–ª–∏ –≥–ª–∞–≤–Ω—É—é –∏–¥–µ—é, –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–∑–∏—Å—ã –∏ –≤—ã–≤–æ–¥—ã.
3.  –ù–∞–ø–∏—à–∏ —Å–∞–º–º–∞—Ä–∏ (–∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É) –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –û–±—ä–µ–º ‚Äî 3-5 –∞–±–∑–∞—Ü–µ–≤.
4.  –°—Ç–∏–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º, –Ω–æ –ª–µ–≥–∫–∏–º –¥–ª—è —á—Ç–µ–Ω–∏—è, –∫–∞–∫ –¥–ª—è –ø–æ—Å—Ç–∞ –≤ Telegram.
5.  –ü—Ä–∏–¥—É–º–∞–π —è—Ä–∫–∏–π –∏ —Ü–µ–ø–ª—è—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ—Å—Ç–∞.
6.  –ü–æ–¥–±–µ—Ä–∏ 3-5 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–∞.
7.  –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–º–µ.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
[–ó–∞–≥–æ–ª–æ–≤–æ–∫]

[–¢–µ–∫—Å—Ç —Å–∞–º–º–∞—Ä–∏]

[–•–µ—à—Ç–µ–≥–∏]
[–≠–º–æ–¥–∑–∏]

–í–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:
---
{text}
---
"""


def process_url(url: str) -> str:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–∫–∞—á–∏–≤–∞–µ—Ç, –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç."""
    try:
        # --- –ù–ê–®–ï –£–õ–£–ß–®–ï–ù–ò–ï ---
        # 1. –ó–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ç–≤–æ—Ä—è—é—Ç—Å—è –æ–±—ã—á–Ω—ã–º –±—Ä–∞—É–∑–µ—Ä–æ–º
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36"
        }

        # 2. –°–∫–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–º–æ—â—å—é requests, –ø–µ—Ä–µ–¥–∞–≤–∞—è –Ω–∞—à–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        response = requests.get(
            url, headers=headers, timeout=15
        )  # timeout —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –≤–µ—á–Ω–æ
        response.raise_for_status()  # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–∞–π—Ç –æ—Ç–≤–µ—Ç–∏–ª –∫–æ–¥–æ–º 4xx –∏–ª–∏ 5xx (–Ω–∞–ø—Ä. 404 Not Found)

        # 3. –ü–µ—Ä–µ–¥–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –≤ trafilatura –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        # –ú—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch_url, –∞ —Å—Ä–∞–∑—É extract
        text = trafilatura.extract(
            response.text,
            include_comments=False,
            include_tables=False,
            no_fallback=True,
        )
        # --- –ö–û–ù–ï–¶ –£–õ–£–ß–®–ï–ù–ò–Ø ---

        if not text or len(text) < 200:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–π –∏–ª–∏ –∏–º–µ—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞—Ç—å JavaScript)."

        max_length = 15000
        text = text[:max_length]

        full_prompt = PROMPT.format(text=text)
        response_gemini = model.generate_content(full_prompt)

        return response_gemini.text

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –æ—Ç requests
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ URL: {e}")
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ —Å—Å—ã–ª–∫–µ. –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å. (–û—à–∏–±–∫–∞: {e})"
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."


@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook_handler():
    if request.method == "POST":
        try:
            update = telegram.Update.de_json(request.get_json(force=True), bot)

            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if not update.message:
                logger.info(
                    "–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ). –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º."
                )
                return "ok"

            chat_id = update.message.chat.id
            text = update.message.text

            if text == "/start":
                bot.send_message(
                    chat_id=chat_id,
                    text="–ü—Ä–∏–≤–µ—Ç! üëã –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é, –∏ —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–µ –ø–æ—Å—Ç –¥–ª—è —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞.",
                )
                return "ok"

            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ
            url_match = re.search(r"https?://\S+", text)
            if url_match:
                url = url_match.group(0)  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
                bot.send_message(
                    chat_id=chat_id, text="–ü—Ä–∏–Ω—è–ª —Å—Å—ã–ª–∫—É. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É... üßô‚Äç‚ôÇÔ∏è"
                )
                summary = process_url(url)
                bot.send_message(
                    chat_id=chat_id, text=summary, disable_web_page_preview=True
                )
            else:
                bot.send_message(
                    chat_id=chat_id,
                    text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://",
                )

        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—É—é –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É –∑–¥–µ—Å—å
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ webhook_handler: {e}")

    return "ok"


# –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
@app.route("/set_webhook", methods=["GET", "POST"])
def set_webhook():
    s = bot.set_webhook(WEBHOOK_URL)
    if s:
        return "webhook setup ok"
    else:
        return "webhook setup failed"
